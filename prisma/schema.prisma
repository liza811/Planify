// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Grade {
  PROFESSEUR
  MCD
  MCA
}

enum NotificationType {
  B_TO_B
}

enum Visibility {
  VISIBLE
  NON_VISIBLE
}

enum Etat {
  ATTENTE
  REFUSE
  VALIDE
}

model Departement {
  id  String @id @default(uuid())
  nom String @unique

  // Relation un-à-plusieurs avec Spécialité
  salles     Salle[]
  specialite Specialite[]

  enseignants Enseignant[]
  etudiants   Etudiant[]
  Admin       Admin[]
  planning    Planning[]

  configuration Configuration? @relation()
}

model Admin {
  id     String  @id @default(uuid())
  name   String?
  prenom String?

  email         String      @unique
  password      String
  emailVerified DateTime?
  image         String?
  departementId String
  departement   Departement @relation(fields: [departementId], references: [id], onDelete: Cascade)
}

model Specialite {
  id            String  @id @default(uuid())
  nom           String  @unique
  departementId String?

  departement Departement?      @relation(fields: [departementId], references: [id], onDelete: Cascade)
  enseignants Enseignant[]
  etudiants   Etudiant[]
  Theme       ThemeSpecialite[]

  @@index([departementId])
}

model Salle {
  id            String  @id @default(uuid())
  numero        Int
  bloc          Int
  departementId String?

  indisponibilite Json?
  soutenances     Soutenance[]

  departement Departement? @relation(fields: [departementId], references: [id], onDelete: Cascade)

  @@index([departementId])
}

model Configuration {
  id         String   @id @default(cuid())
  dateDebut  DateTime
  dateFin    DateTime
  heureDebut String
  heureFin   String
  duree      String

dateFinChoix  DateTime?
nbTheme Int?
nbChoix Int?
nbEncadrement Int?
nbDateIndispo Int?



  departementId String       @unique
  departement   Departement? @relation(fields: [departementId], references: [id])
}

model Enseignant {
  id        String @id @default(uuid())
  nom       String
  prenom    String
  email     String @unique
  matricule String

  grade              String
  datesIndisponibles Json?

  themes Theme[]

  specialiteId  String
  departementId String

  specialite            Specialite             @relation(fields: [specialiteId], references: [id], onDelete: Cascade)
  departement           Departement            @relation(fields: [departementId], references: [id], onDelete: Cascade)
  twoFactorConfirmation TwoFactorConfirmation?
  Affectation           Affectation[]

  soutenancePresiden Soutenance[]   @relation("president")
  Examinateurs       Examinateurs[]

  @@index([email])
}

model Etudiant {
  id        String @id @default(uuid())
  nom       String
  prenom    String
  email     String @unique
  matricule String

  image String?

  binome        Binome? @relation(fields: [idBinome], references: [id])
  idBinome      String?
  specialiteId  String
  departementId String

  specialite            Specialite?            @relation(fields: [specialiteId], references: [id], onDelete: Cascade)
  departement           Departement?           @relation(fields: [departementId], references: [id], onDelete: Cascade)
  twoFactorConfirmation TwoFactorConfirmation?
  Notification          Notification[]

  @@index([email])
}

model Binome {
  id           String         @id @default(uuid())
  etudiants    Etudiant[]
  ChoisirTheme ChoisirTheme[]
  presidentId  String?

  Affectation Affectation?

  soutenance   Soutenance[]
  soutenanceId Int?         @unique

  @@index([presidentId])
}

model Theme {
  id  String @id @default(uuid())
  nom String @db.Text

  themeSpecialites ThemeSpecialite[]
  proposerId       String
  proposePar       Enseignant?       @relation(fields: [proposerId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  ChoisirTheme     ChoisirTheme[]
  Affectation      Affectation?
}

model ChoisirTheme {
  id       String @id @default(uuid())
  etat     Etat
  binomeId String
  themeId  String

  binome Binome @relation(fields: [binomeId], references: [id], onDelete: Cascade)
  theme  Theme  @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@index([binomeId])
  @@index([themeId])
}

model Affectation {
  id          Int    @id @default(autoincrement())
  idBinome    String @unique
  themeId     String @unique
  encadrantId String

  Binome    Binome      @relation(fields: [idBinome], references: [id], onDelete: Cascade)
  Theme     Theme       @relation(fields: [themeId], references: [id], onDelete: Cascade)
  encadrent Enseignant? @relation(fields: [encadrantId], references: [id])

  createdAt DateTime @default(now())
}

model ThemeSpecialite {
  themeId      String // Foreign key referencing Theme
  specialiteId String // Foreign key referencing Specialite

  theme      Theme      @relation(fields: [themeId], references: [id], onDelete: Cascade)
  specialite Specialite @relation(fields: [specialiteId], references: [id], onDelete: Cascade)

  @@id([themeId, specialiteId])
}

// verify email after registration
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  ensId      String?     @unique
  enseignant Enseignant? @relation(fields: [ensId], references: [id], onDelete: Cascade)
  etudId     String?     @unique
  etudiant   Etudiant?   @relation(fields: [etudId], references: [id], onDelete: Cascade)
}

model Examinateurs {
  id           Int        @id @default(autoincrement())
  enseignnatId String
  enseignant   Enseignant @relation(fields: [enseignnatId], references: [id], onDelete: Cascade)

  soutenanceId Int?
  soutenance   Soutenance? @relation(fields: [soutenanceId], references: [id], onDelete: Cascade)
}

model Notification {
  id      String   @id @default(uuid())
  content String   @db.Text
  date    DateTime @default(now())
  seen    Boolean  @default(false)

  to   Etudiant         @relation(fields: [toId], references: [id], onDelete: Cascade)
  toId String
  type NotificationType
}

model Soutenance {
  id Int @id @default(autoincrement())

  salle   Salle?  @relation(fields: [salleId], references: [id])
  salleId String?

  date        String?
  heure       String?
  presidentId String?
  president   Enseignant? @relation("president", fields: [presidentId], references: [id])

  examinateurs Examinateurs[]
  Planning     Planning?      @relation(fields: [planningId], references: [id], onDelete: Cascade)
  planningId   Int?
  Binome       Binome?        @relation(fields: [binomeId], references: [id])
  binomeId     String?
}

model Planning {
  id Int @id @default(autoincrement())

  soutenances   Soutenance[]
  version       String
  createdAt     DateTime     @default(now())
  etat          Visibility
  Departement   Departement? @relation(fields: [departementId], references: [id])
  departementId String?
}
