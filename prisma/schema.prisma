// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String    @unique
//   password      String
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
// }

enum Grade {
  PROFESSEUR
  MCD
  MCA
}

model Departement {
  id  String @id @default(uuid())
  nom String   @unique

  // Relation un-à-plusieurs avec Spécialité
  salles  Salle[]
   specialite  Specialite[]
  enseignants Enseignant[]
  etudiants   Etudiant[]
  Admin       Admin[]
}

model Admin {
   id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  departementId String
  departement   Departement @relation(fields: [departementId], references: [id], onDelete: Cascade)
}

model Specialite {
  id            String @id @default(uuid())
  nom           String  @unique
  departementId String?

  departement Departement?  @relation(fields: [departementId], references: [id], onDelete: Cascade)
  enseignants Enseignant[]
  etudiants   Etudiant[]

  @@index([departementId])
}
model Salle {
  id            String @id @default(uuid())
  numero           Int
  bloc              Int
  departementId String?

  departement Departement?  @relation(fields: [departementId], references: [id], onDelete: Cascade)


  @@index([departementId])
}

model Enseignant {
  id        String @id @default(uuid())
  nom       String
  prenom    String
  email     String @unique
  matricule String

  image              String?
  grade              String
  datesIndisponibles Json?

  specialiteId  String
  departementId String

  specialite  Specialite  @relation(fields: [specialiteId], references: [id], onDelete: Cascade)
  departement Departement @relation(fields: [departementId], references: [id], onDelete: Cascade)
   @@index([email])
}

model Etudiant {
  id        String @id @default(uuid())
  nom       String
  prenom    String
  email     String @unique
  matricule String

  image String?

  specialiteId  String
  departementId String

  specialite  Specialite  @relation(fields: [specialiteId], references: [id], onDelete: Cascade)
  departement Departement @relation(fields: [departementId], references: [id], onDelete: Cascade)
}

// verify email after registration
model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Indisponibilite {
//   /// ...

//   /// Date de début
//   debutDate Date

//   /// Date de fin (optionnel)
//   finDate Date?

//   /// Heure de début (optionnel)
//   debutHeure Time?

//   /// Heure de fin (optionnel)
//   finHeure Time?

//   /// Répétition (optionnel)
//   repetition String

//   /// Enseignant concerné
//   enseignant: Enseignant @relation(fields: [enseignantId], references: [Enseignant.id])

//   /// ...
// }
